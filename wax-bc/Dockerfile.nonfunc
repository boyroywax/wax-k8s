

###########
# BUILDER #
###########

FROM ubuntu:18.04 as builder

ARG SOURCE_ORIGIN=https://github.com/worldwide-asset-exchange/wax-blockchain
ARG COMMIT=615b130616f29f2e111666616903ac8825911474
ARG WORK_DIR=/usr/src

WORKDIR ${WORK_DIR}
RUN apt-get update \
    #  basic build tools
    && apt-get install -y --no-install-recommends \
        git \
        make \
        bzip2 \
        automake \
        libbz2-dev \
        libssl-dev \
        doxygen \
        graphviz \
        libgmp3-dev \
        autotools-dev \
        libicu-dev \
        python2.7 \
        python2.7-dev \
        python3 \
        python3-dev \
        autoconf \
        libtool \
        curl \
        zlib1g-dev \
        sudo \
        ruby \
        libusb-1.0-0-dev \
        libcurl4-gnutls-dev \
        pkg-config \
        patch
    #  select boost librarie
    #  wallet db v4.8 repository
RUN apt-get install -y --no-install-recommends \
       ca-certificates \
       git 
RUN git clone ${SOURCE_ORIGIN} \
    && ls -la  && ls
RUN cd wax-blockchain \
    #  Use a GREEN commit 
    && git checkout ${COMMIT}
    #  build the wallet

# RUN cd wax-blockchain
# RUN git submodule update --init --recursive
WORKDIR ${WORK_DIR}/wax-blockchain/scripts

RUN ls
RUN chmod +x eosio_build_ubuntu.sh eosio_install.sh

# RUN eosio_uninstall.sh

ENV NAME="Ubuntu"
ENV VERSION_ID="18.04"
ENV CPU_CORES="1"
ENV MEM_GIG="8"
ENV DISK_TOTAL="20"
ENV DISK_AVAIL="20"

RUN git submodule update --init --recursive

# Build (and set the installation directory)
RUN ./eosio_build.sh -y

# This will install the blockchain in the previously set installation directory
RUN ./eos_install.sh


# #########
# # FINAL #
# #########
# FROM ubuntu:18.04
# LABEL maintainer="The Boy*Roy container maintainers <j@theboyroy.com>"

# ARG EXT_PORT=9876
# ARG RPC_PORT=8888
# ARG NODEOS_HOME=/root/.local/share/eosio/nodeos
# ARG USER=waxuser

# RUN useradd -m -s /bin/bash -u 1001 ${USER}
# RUN mkddir -p /home/${USER}
# WORKDIR /home/{$USER}

# COPY --from=builder /usr/bin/*.deb .

# RUN apt update && \
#     apt install -y curl wget && \
#     apt install -y /*.deb && \
#     rm -rf /*.deb /var/lib/apt/lists/*

# #  a few minor docker-specific tweaks
# #  see https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap
# # Define our command to be run when launching the container
# RUN set -xe \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L40-L48
# 	&& echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
# 	&& echo 'exit 101' >> /usr/sbin/policy-rc.d \
# 	&& chmod +x /usr/sbin/policy-rc.d \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L54-L56
# 	&& dpkg-divert --local --rename --add /sbin/initctl \
# 	&& cp -a /usr/sbin/policy-rc.d /sbin/initctl \
# 	&& sed -i 's/^exit.*/exit 0/' /sbin/initctl \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L71-L78
# 	&& echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L85-L105
# 	&& echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
# 	&& echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
# 	&& echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L109-L115
# 	&& echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L118-L130
# 	&& echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes \
# 	\
# #  https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L134-L151
# 	&& echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests
# #  delete all the apt list files since they're big and get stale quickly
# RUN rm -rf /var/lib/apt/lists/*
# #  this forces "apt-get update" in dependent images, which is also good
# #  (see also https://bugs.launchpad.net/cloud-images/+bug/1699913)
# #  make systemd-detect-virt return "docker"
# #  See: https://github.com/systemd/systemd/blob/aa0c34279ee40bce2f9681b496922dedbadfca19/src/basic/virt.c#L434
# RUN mkdir -p /run/systemd && echo 'docker' > /run/systemd/container


# COPY --from=builder /usr/lib/* /usr/lib/

# COPY ./entrypoint.sh ${BIN_HOME}
# RUN chmod +x ${BIN_HOME}/entrypoint.sh

# WORKDIR /home/${COIN}
# USER ${COIN}
# RUN mkdir ${NODEOS_HOME}} \
#  && chmod 700 ${NODEOS_HOME}}

# VOLUME ${NODEOS_HOME}}/data
# VOLUME ${NODEOS_HOME}/config
# EXPOSE ${EXT_PORT}
# EXPOSE ${RPC_PORT}

# ENTRYPOINT ${BIN_HOME}/entrypoint.sh 
